#!/usr/bin/env python3

"""Act as an editor for a git commit message.

Extract the diff for the change, format it for a LLM to summarize it for a git commit message."""

import os
import sys

import dotenv
import openai


def create_commit_message(patch):
    prompt = f"""Generate a concise git commit message that summarizes the key changes with a summary line and bullet points starting with `- `. Stay high-level and combine smaller changes to overarching topics. Skip describing any reformatting changes.

Use the following rules:

1. Separate subject from body with a blank line
2. Limit the subject line to 50 characters
3. Capitalize the subject line
4. Do not end the subject line with a period
5. Use the imperative mood in the subject line
6. Wrap the body at 72 characters
7. Use the body to explain what and why vs. how

Code change:\n\n```{patch}```\n"""

    client = openai.OpenAI()

    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": prompt,
            }
        ],
        model=os.getenv("OPENAI_MODEL", "gpt-4o"),
    )
    message = chat_completion.choices[0].message.content.split("\n")
    # remove first line and end line if they are ```
    if message[0] == "```":
        message = message[1:]
    if message[-1] == "```":
        message = message[:-1]
    return "\n".join(message)


if __name__ == "__main__":
    dotenv.load_dotenv()

    pfile = os.popen("git diff --staged")
    data = pfile.read()

    if data == "":
        print("No changes to commit")
        sys.exit(0)

    summary = create_commit_message(data)
    sys.stderr.write(f"\n\n{summary}\n")
    with open(sys.argv[1], "w") as f:
        f.write(summary)
