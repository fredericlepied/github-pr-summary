#!/usr/bin/env python3

"""Extract diff for the change, format it for a LLM to summarize it for a git commit message. Use this summary to commit the change with the message generated by the LLM.

If no parameters are passed, it will use the staged changes for the commit message. If parameters are passed, it will use the diff of the files passed as parameters for the commit message"""

import os
import sys

import dotenv
import openai


def create_commit_message(patch):
    prompt = f"Generate a concise git commit message that summarizes the key changes with a summary line with less than 50 characters and bullet points starting with `- `. Stay high-level and combine smaller changes to overarching topics. Skip describing any reformatting changes. Code change:\n\n```{patch}```\n"

    client = openai.OpenAI()

    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": prompt,
            }
        ],
        model=os.getenv("OPENAI_MODEL", "gpt-4o"),
    )
    message = chat_completion.choices[0].message.content.split("\n")
    # remove first line and end line if they are ```
    if message[0] == "```":
        message = message[1:]
    if message[-1] == "```":
        message = message[:-1]
    return "\n".join(message)


if __name__ == "__main__":
    dotenv.load_dotenv()

    # if there is not parameters passed, get the output of git diff --staged
    if len(sys.argv) == 1:
        pfile = os.popen("git diff --staged")
    else:
        pfile = os.popen(f"git diff {' '.join(sys.argv[1:])}")
    data = pfile.read()

    if data == "":
        print("No changes to commit")
        sys.exit(0)

    summary = create_commit_message(data)
    print(summary)

    # commit the change
    os.system(f'git commit -m "{summary}" {" ".join(sys.argv[1:])}')
